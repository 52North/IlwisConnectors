# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""
The Python API for ILWIS Objects
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ilwisobjects', [dirname(__file__)])
        except ImportError:
            import _ilwisobjects
            return _ilwisobjects
        if fp is not None:
            try:
                _mod = imp.load_module('_ilwisobjects', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ilwisobjects = swig_import_helper()
    del swig_import_helper
else:
    import _ilwisobjects
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


IlwisException = _ilwisobjects.IlwisException
InvalidObjectException = _ilwisobjects.InvalidObjectException
FeatureCreationError = _ilwisobjects.FeatureCreationError


def _initIlwisObjects():
  """_initIlwisObjects() -> bool"""
  return _ilwisobjects._initIlwisObjects()

def disconnectIssueLogger():
  """disconnectIssueLogger()"""
  return _ilwisobjects.disconnectIssueLogger()

def connectIssueLogger():
  """connectIssueLogger()"""
  return _ilwisobjects.connectIssueLogger()
class it(_object):
    """Proxy of C++ pythonapi::it class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, it, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, it, name)
    __repr__ = _swig_repr
    FEATURE = _ilwisobjects.it_FEATURE
    RASTER = _ilwisobjects.it_RASTER
    COVERAGE = _ilwisobjects.it_COVERAGE
    TABLE = _ilwisobjects.it_TABLE
    GEOREF = _ilwisobjects.it_GEOREF
    COORDSYSTEM = _ilwisobjects.it_COORDSYSTEM
    DOMAIN = _ilwisobjects.it_DOMAIN
    NUMERICDOMAIN = _ilwisobjects.it_NUMERICDOMAIN
    ITEMDOMAIN = _ilwisobjects.it_ITEMDOMAIN
    OPERATIONMETADATA = _ilwisobjects.it_OPERATIONMETADATA
    PROJECTION = _ilwisobjects.it_PROJECTION
    ELLIPSOID = _ilwisobjects.it_ELLIPSOID
    CATALOG = _ilwisobjects.it_CATALOG
    CONTINUOUSCOLOR = _ilwisobjects.it_CONTINUOUSCOLOR
    PALETTECOLOR = _ilwisobjects.it_PALETTECOLOR
    def __init__(self): 
        """__init__(pythonapi::it self) -> it"""
        this = _ilwisobjects.new_it()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ilwisobjects.delete_it
    __del__ = lambda self : None;
it_swigregister = _ilwisobjects.it_swigregister
it_swigregister(it)

def object_cast(obj):
    type = obj.ilwisType()
    if it.RASTER & type != 0:
        return RasterCoverage.toRasterCoverage(obj)
    elif it.FEATURE & type != 0:
        return FeatureCoverage.toFeatureCoverage(obj)
    elif it.GEOREF & type != 0:
        return GeoReference.toGeoReference(obj)
    elif it.TABLE & type != 0:
        return Table.toTable(obj)
    elif it.NUMERICDOMAIN & type != 0:
      return NumericDomain.toNumericDomain(obj)
    elif it.DOMAIN & type != 0:
      return Domain.toDomain(obj)
    elif it.COORDSYSTEM & type != 0:
        return CoordinateSystem.toCoordinateSystem(obj)
#    elif it.OPERATIONMETADATA & type != 0:
#        return OperationMetaData.toOperationMetaData(obj)
#    elif it.PROJECTION & type != 0:
#        return Projection.toProjection(obj)
#    elif it.ELLIPSOID & type != 0:
#        return Ellipsoid.toEllipsoid(obj)
    elif it.CATALOG & type != 0:
        return Catalog.toCatalog(obj)
    elif type == 0:
        raise TypeError("unknown IlwisType")
    else:
        return obj

class Object(_object):
    """Proxy of C++ pythonapi::Object class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Object, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Object, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ilwisobjects.delete_Object
    __del__ = lambda self : None;
    def __bool__(self):
        """__bool__(Object self) -> bool"""
        return _ilwisobjects.Object___bool__(self)

    def __str__(self):
        """__str__(Object self) -> std::string"""
        return _ilwisobjects.Object___str__(self)

    def ilwisType(self):
        """ilwisType(Object self) -> IlwisTypes"""
        return _ilwisobjects.Object_ilwisType(self)

Object_swigregister = _ilwisobjects.Object_swigregister
Object_swigregister(Object)

class Engine(_object):
    """Proxy of C++ pythonapi::Engine class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Engine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Engine, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(pythonapi::Engine self) -> Engine"""
        this = _ilwisobjects.new_Engine()
        try: self.this.append(this)
        except: self.this = this
    def _do(*args):
        """
        _do(std::string output_name, std::string operation, std::string c3="", std::string c4="", 
            std::string c5="", std::string c6="", std::string c7="", std::string c8="", 
            std::string c9="") -> Object
        _do(std::string output_name, std::string operation, std::string c3="", std::string c4="", 
            std::string c5="", std::string c6="", std::string c7="", std::string c8="") -> Object
        _do(std::string output_name, std::string operation, std::string c3="", std::string c4="", 
            std::string c5="", std::string c6="", std::string c7="") -> Object
        _do(std::string output_name, std::string operation, std::string c3="", std::string c4="", 
            std::string c5="", std::string c6="") -> Object
        _do(std::string output_name, std::string operation, std::string c3="", std::string c4="", 
            std::string c5="") -> Object
        _do(std::string output_name, std::string operation, std::string c3="", std::string c4="") -> Object
        _do(std::string output_name, std::string operation, std::string c3="") -> Object
        _do(std::string output_name, std::string operation) -> Object
        """
        return _ilwisobjects.Engine__do(*args)

    if _newclass:_do = staticmethod(_do)
    __swig_getmethods__["_do"] = lambda x: _do
    def setWorkingCatalog(*args):
        """setWorkingCatalog(std::string const & location) -> bool"""
        return _ilwisobjects.Engine_setWorkingCatalog(*args)

    if _newclass:setWorkingCatalog = staticmethod(setWorkingCatalog)
    __swig_getmethods__["setWorkingCatalog"] = lambda x: setWorkingCatalog
    def operations(self, filter="*"):
        """
        operations(Engine self, std::string const & filter="*") -> PyObject
        operations(Engine self) -> PyObject *
        """
        return _ilwisobjects.Engine_operations(self, filter)

    def operationMetaData(self, *args):
        """operationMetaData(Engine self, std::string const & name) -> std::string"""
        return _ilwisobjects.Engine_operationMetaData(self, *args)

    @staticmethod
    def do(operation,arg1="",arg2="",arg3="",arg4="",arg5="",arg6="",arg7="",out=""):
        if str(operation) != "":
            obj = Engine__do(str(out),str(operation),str(arg1),str(arg2),str(arg3),str(arg4),str(arg5),str(arg6),str(arg7))
        else:
            raise IlwisException("no operation given!")
        return object_cast(obj)

    __swig_destroy__ = _ilwisobjects.delete_Engine
    __del__ = lambda self : None;
Engine_swigregister = _ilwisobjects.Engine_swigregister
Engine_swigregister(Engine)

def Engine__do(*args):
  """
    _do(std::string output_name, std::string operation, std::string c3="", std::string c4="", 
        std::string c5="", std::string c6="", std::string c7="", std::string c8="", 
        std::string c9="") -> Object
    _do(std::string output_name, std::string operation, std::string c3="", std::string c4="", 
        std::string c5="", std::string c6="", std::string c7="", std::string c8="") -> Object
    _do(std::string output_name, std::string operation, std::string c3="", std::string c4="", 
        std::string c5="", std::string c6="", std::string c7="") -> Object
    _do(std::string output_name, std::string operation, std::string c3="", std::string c4="", 
        std::string c5="", std::string c6="") -> Object
    _do(std::string output_name, std::string operation, std::string c3="", std::string c4="", 
        std::string c5="") -> Object
    _do(std::string output_name, std::string operation, std::string c3="", std::string c4="") -> Object
    _do(std::string output_name, std::string operation, std::string c3="") -> Object
    Engine__do(std::string output_name, std::string operation) -> Object
    """
  return _ilwisobjects.Engine__do(*args)

def Engine_setWorkingCatalog(*args):
  """Engine_setWorkingCatalog(std::string const & location) -> bool"""
  return _ilwisobjects.Engine_setWorkingCatalog(*args)

class IlwisObject(Object):
    """Proxy of C++ pythonapi::IlwisObject class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IlwisObject, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IlwisObject, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    cmINPUT = _ilwisobjects.IlwisObject_cmINPUT
    cmOUTPUT = _ilwisobjects.IlwisObject_cmOUTPUT
    cmEXTENDED = _ilwisobjects.IlwisObject_cmEXTENDED
    smMETADATA = _ilwisobjects.IlwisObject_smMETADATA
    smBINARYDATA = _ilwisobjects.IlwisObject_smBINARYDATA
    __swig_destroy__ = _ilwisobjects.delete_IlwisObject
    __del__ = lambda self : None;
    def setInputConnection(self, *args):
        """
        setInputConnection(IlwisObject self, std::string const & url, std::string const & format="", std::string const & fnamespace="")
        setInputConnection(IlwisObject self, std::string const & url, std::string const & format="")
        setInputConnection(IlwisObject self, std::string const & url)
        """
        return _ilwisobjects.IlwisObject_setInputConnection(self, *args)

    def setOutputConnection(self, *args):
        """
        setOutputConnection(IlwisObject self, std::string const & url, std::string const & format="", std::string const & fnamespace="")
        setOutputConnection(IlwisObject self, std::string const & url, std::string const & format="")
        setOutputConnection(IlwisObject self, std::string const & url)
        """
        return _ilwisobjects.IlwisObject_setOutputConnection(self, *args)

    def store(self, *args):
        """
        store(IlwisObject self, int storeMode=pythonapi::IlwisObject::smMETADATA|pythonapi::IlwisObject::smBINARYDATA)
        store(IlwisObject self)
        """
        return _ilwisobjects.IlwisObject_store(self, *args)

    def __bool__(self):
        """__bool__(IlwisObject self) -> bool"""
        return _ilwisobjects.IlwisObject___bool__(self)

    def __str__(self):
        """__str__(IlwisObject self) -> std::string"""
        return _ilwisobjects.IlwisObject___str__(self)

    def __add__(self, *args):
        """__add__(IlwisObject self, std::string value) -> std::string"""
        return _ilwisobjects.IlwisObject___add__(self, *args)

    def __radd__(self, *args):
        """__radd__(IlwisObject self, std::string value) -> std::string"""
        return _ilwisobjects.IlwisObject___radd__(self, *args)

    def name(self, *args):
        """
        name(IlwisObject self) -> std::string
        name(IlwisObject self, std::string name)
        """
        return _ilwisobjects.IlwisObject_name(self, *args)

    def isInternal(self):
        """isInternal(IlwisObject self) -> bool"""
        return _ilwisobjects.IlwisObject_isInternal(self)

    def type(self):
        """type(IlwisObject self) -> std::string"""
        return _ilwisobjects.IlwisObject_type(self)

    def ilwisID(self):
        """ilwisID(IlwisObject self) -> quint64"""
        return _ilwisobjects.IlwisObject_ilwisID(self)

    def ilwisType(self):
        """ilwisType(IlwisObject self) -> IlwisTypes"""
        return _ilwisobjects.IlwisObject_ilwisType(self)

IlwisObject_swigregister = _ilwisobjects.IlwisObject_swigregister
IlwisObject_swigregister(IlwisObject)

class CoordinateSystem(IlwisObject):
    """Proxy of C++ pythonapi::CoordinateSystem class"""
    __swig_setmethods__ = {}
    for _s in [IlwisObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoordinateSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [IlwisObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoordinateSystem, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(pythonapi::CoordinateSystem self, std::string const & resource) -> CoordinateSystem"""
        this = _ilwisobjects.new_CoordinateSystem(*args)
        try: self.this.append(this)
        except: self.this = this
    def envelope(self):
        """envelope(CoordinateSystem self) -> Envelope"""
        return _ilwisobjects.CoordinateSystem_envelope(self)

    def __eq__(self, *args):
        """__eq__(CoordinateSystem self, CoordinateSystem csy) -> bool"""
        return _ilwisobjects.CoordinateSystem___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(CoordinateSystem self, CoordinateSystem csy) -> bool"""
        return _ilwisobjects.CoordinateSystem___ne__(self, *args)

    def toCoordinateSystem(*args):
        """toCoordinateSystem(Object obj) -> CoordinateSystem"""
        return _ilwisobjects.CoordinateSystem_toCoordinateSystem(*args)

    if _newclass:toCoordinateSystem = staticmethod(toCoordinateSystem)
    __swig_getmethods__["toCoordinateSystem"] = lambda x: toCoordinateSystem
    __swig_destroy__ = _ilwisobjects.delete_CoordinateSystem
    __del__ = lambda self : None;
CoordinateSystem_swigregister = _ilwisobjects.CoordinateSystem_swigregister
CoordinateSystem_swigregister(CoordinateSystem)

def CoordinateSystem_toCoordinateSystem(*args):
  """CoordinateSystem_toCoordinateSystem(Object obj) -> CoordinateSystem"""
  return _ilwisobjects.CoordinateSystem_toCoordinateSystem(*args)

class Table(IlwisObject):
    """Proxy of C++ pythonapi::Table class"""
    __swig_setmethods__ = {}
    for _s in [IlwisObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Table, name, value)
    __swig_getmethods__ = {}
    for _s in [IlwisObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Table, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pythonapi::Table self) -> Table
        __init__(pythonapi::Table self, std::string resource) -> Table
        """
        this = _ilwisobjects.new_Table(*args)
        try: self.this.append(this)
        except: self.this = this
    def columnCount(self):
        """columnCount(Table self) -> quint32"""
        return _ilwisobjects.Table_columnCount(self)

    def columns(self):
        """columns(Table self) -> PyObject *"""
        return _ilwisobjects.Table_columns(self)

    def addColumn(self, *args):
        """addColumn(Table self, std::string const & name, std::string const & domain) -> bool"""
        return _ilwisobjects.Table_addColumn(self, *args)

    def columnIndex(self, *args):
        """columnIndex(Table self, std::string const & name) -> qint32"""
        return _ilwisobjects.Table_columnIndex(self, *args)

    def column(self, *args):
        """
        column(Table self, std::string const & name) -> PyObject
        column(Table self, quint32 columnIndex) -> PyObject *
        """
        return _ilwisobjects.Table_column(self, *args)

    def recordCount(self):
        """recordCount(Table self) -> quint32"""
        return _ilwisobjects.Table_recordCount(self)

    def select(self, *args):
        """select(Table self, std::string const & conditions) -> PyObject *"""
        return _ilwisobjects.Table_select(self, *args)

    def record(self, *args):
        """record(Table self, quint32 rec) -> PyObject *"""
        return _ilwisobjects.Table_record(self, *args)

    def cell(self, *args):
        """
        cell(Table self, std::string const & name, quint32 rec) -> PyObject
        cell(Table self, quint32 colIndex, quint32 rec) -> PyObject *
        """
        return _ilwisobjects.Table_cell(self, *args)

    def setCell(self, *args):
        """
        setCell(Table self, std::string const & name, quint32 rec, PyObject const * value)
        setCell(Table self, quint32 colIndex, quint32 rec, PyObject const * value)
        setCell(Table self, std::string const & name, quint32 rec, qint64 value)
        setCell(Table self, quint32 colIndex, quint32 rec, qint64 value)
        setCell(Table self, std::string const & name, quint32 rec, std::string value)
        setCell(Table self, quint32 colIndex, quint32 rec, std::string value)
        setCell(Table self, std::string const & name, quint32 rec, double value)
        setCell(Table self, quint32 colIndex, quint32 rec, double value)
        """
        return _ilwisobjects.Table_setCell(self, *args)

    def toTable(*args):
        """toTable(Object obj) -> Table"""
        return _ilwisobjects.Table_toTable(*args)

    if _newclass:toTable = staticmethod(toTable)
    __swig_getmethods__["toTable"] = lambda x: toTable
    __swig_destroy__ = _ilwisobjects.delete_Table
    __del__ = lambda self : None;
Table_swigregister = _ilwisobjects.Table_swigregister
Table_swigregister(Table)

def Table_toTable(*args):
  """Table_toTable(Object obj) -> Table"""
  return _ilwisobjects.Table_toTable(*args)

class Coverage(IlwisObject):
    """Proxy of C++ pythonapi::Coverage class"""
    __swig_setmethods__ = {}
    for _s in [IlwisObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Coverage, name, value)
    __swig_getmethods__ = {}
    for _s in [IlwisObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Coverage, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    atCOVERAGE = _ilwisobjects.Coverage_atCOVERAGE
    atINDEX = _ilwisobjects.Coverage_atINDEX
    __swig_destroy__ = _ilwisobjects.delete_Coverage
    __del__ = lambda self : None;
    def addAttribute(self, *args):
        """addAttribute(Coverage self, std::string const & name, std::string const & domain) -> bool"""
        return _ilwisobjects.Coverage_addAttribute(self, *args)

    def attributeCount(self):
        """attributeCount(Coverage self) -> quint32"""
        return _ilwisobjects.Coverage_attributeCount(self)

    def attributes(self):
        """attributes(Coverage self) -> PyObject *"""
        return _ilwisobjects.Coverage_attributes(self)

    def attributeTable(self, *args):
        """
        attributeTable(Coverage self, pythonapi::Coverage::AttributeType attType=atCOVERAGE) -> Table
        attributeTable(Coverage self) -> Table
        """
        return _ilwisobjects.Coverage_attributeTable(self, *args)

    def coordinateSystem(self):
        """coordinateSystem(Coverage self) -> CoordinateSystem"""
        return _ilwisobjects.Coverage_coordinateSystem(self)

    def setCoordinateSystem(self, *args):
        """setCoordinateSystem(Coverage self, CoordinateSystem cs)"""
        return _ilwisobjects.Coverage_setCoordinateSystem(self, *args)

Coverage_swigregister = _ilwisobjects.Coverage_swigregister
Coverage_swigregister(Coverage)

class Coordinate(_object):
    """Proxy of C++ pythonapi::Coordinate class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Coordinate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Coordinate, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pythonapi::Coordinate self, double x, double y) -> Coordinate
        __init__(pythonapi::Coordinate self, double x, double y, double z) -> Coordinate
        __init__(pythonapi::Coordinate self, Coordinate crd) -> Coordinate
        """
        this = _ilwisobjects.new_Coordinate(*args)
        try: self.this.append(this)
        except: self.this = this
    def x(self):
        """x(Coordinate self) -> double"""
        return _ilwisobjects.Coordinate_x(self)

    def y(self):
        """y(Coordinate self) -> double"""
        return _ilwisobjects.Coordinate_y(self)

    def z(self):
        """z(Coordinate self) -> double"""
        return _ilwisobjects.Coordinate_z(self)

    def setX(self, *args):
        """setX(Coordinate self, double v)"""
        return _ilwisobjects.Coordinate_setX(self, *args)

    def setY(self, *args):
        """setY(Coordinate self, double v)"""
        return _ilwisobjects.Coordinate_setY(self, *args)

    def setZ(self, *args):
        """setZ(Coordinate self, double v)"""
        return _ilwisobjects.Coordinate_setZ(self, *args)

    def is3D(self):
        """is3D(Coordinate self) -> bool"""
        return _ilwisobjects.Coordinate_is3D(self)

    def __imul__(self, *args):
        """__imul__(Coordinate self, double n) -> Coordinate"""
        return _ilwisobjects.Coordinate___imul__(self, *args)

    def __itruediv__(self, *args):
        """__itruediv__(Coordinate self, double n) -> Coordinate"""
        return _ilwisobjects.Coordinate___itruediv__(self, *args)

    def __eq__(self, *args):
        """__eq__(Coordinate self, Coordinate other) -> bool"""
        return _ilwisobjects.Coordinate___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Coordinate self, Coordinate other) -> bool"""
        return _ilwisobjects.Coordinate___ne__(self, *args)

    def __str__(self):
        """__str__(Coordinate self) -> std::string"""
        return _ilwisobjects.Coordinate___str__(self)

    def __bool__(self):
        """__bool__(Coordinate self) -> bool"""
        return _ilwisobjects.Coordinate___bool__(self)

    __swig_getmethods__["x"] = x
    __swig_getmethods__["y"] = y
    __swig_getmethods__["z"] = z
    __swig_setmethods__["x"] = setX
    __swig_setmethods__["y"] = setY
    __swig_setmethods__["z"] = setZ
    if _newclass:
        x = property(x,setX)
        y = property(y,setY)
        z = property(z,setZ)

    __swig_destroy__ = _ilwisobjects.delete_Coordinate
    __del__ = lambda self : None;
Coordinate_swigregister = _ilwisobjects.Coordinate_swigregister
Coordinate_swigregister(Coordinate)

class Pixel(_object):
    """Proxy of C++ pythonapi::PixelTemplate<(qint32)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pixel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Pixel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pythonapi::PixelTemplate<(qint32)> self, Pixel pixel) -> Pixel
        __init__(pythonapi::PixelTemplate<(qint32)> self, PixelD pixel) -> Pixel
        __init__(pythonapi::PixelTemplate<(qint32)> self, int x, int y) -> Pixel
        __init__(pythonapi::PixelTemplate<(qint32)> self, int x, int y, int z) -> Pixel
        """
        this = _ilwisobjects.new_Pixel(*args)
        try: self.this.append(this)
        except: self.this = this
    def x(self):
        """x(Pixel self) -> int"""
        return _ilwisobjects.Pixel_x(self)

    def y(self):
        """y(Pixel self) -> int"""
        return _ilwisobjects.Pixel_y(self)

    def z(self):
        """z(Pixel self) -> int"""
        return _ilwisobjects.Pixel_z(self)

    def setX(self, *args):
        """setX(Pixel self, int v)"""
        return _ilwisobjects.Pixel_setX(self, *args)

    def setY(self, *args):
        """setY(Pixel self, int v)"""
        return _ilwisobjects.Pixel_setY(self, *args)

    def setZ(self, *args):
        """setZ(Pixel self, int v)"""
        return _ilwisobjects.Pixel_setZ(self, *args)

    def is3D(self):
        """is3D(Pixel self) -> bool"""
        return _ilwisobjects.Pixel_is3D(self)

    def __imul__(self, *args):
        """__imul__(Pixel self, int n) -> Pixel"""
        return _ilwisobjects.Pixel___imul__(self, *args)

    def __itruediv__(self, *args):
        """__itruediv__(Pixel self, int n) -> Pixel"""
        return _ilwisobjects.Pixel___itruediv__(self, *args)

    def __eq__(self, *args):
        """__eq__(Pixel self, Pixel other) -> bool"""
        return _ilwisobjects.Pixel___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Pixel self, Pixel other) -> bool"""
        return _ilwisobjects.Pixel___ne__(self, *args)

    def __str__(self):
        """__str__(Pixel self) -> std::string"""
        return _ilwisobjects.Pixel___str__(self)

    def __bool__(self):
        """__bool__(Pixel self) -> bool"""
        return _ilwisobjects.Pixel___bool__(self)

    __swig_getmethods__["x"] = x
    __swig_getmethods__["y"] = y
    __swig_getmethods__["z"] = z
    __swig_setmethods__["x"] = setX
    __swig_setmethods__["y"] = setY
    __swig_setmethods__["z"] = setZ
    if _newclass:
        x = property(x,setX)
        y = property(y,setY)
        z = property(z,setZ)

    __swig_destroy__ = _ilwisobjects.delete_Pixel
    __del__ = lambda self : None;
Pixel_swigregister = _ilwisobjects.Pixel_swigregister
Pixel_swigregister(Pixel)

class PixelD(_object):
    """Proxy of C++ pythonapi::PixelTemplate<(double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixelD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PixelD, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pythonapi::PixelTemplate<(double)> self, Pixel pixel) -> PixelD
        __init__(pythonapi::PixelTemplate<(double)> self, PixelD pixel) -> PixelD
        __init__(pythonapi::PixelTemplate<(double)> self, double x, double y) -> PixelD
        __init__(pythonapi::PixelTemplate<(double)> self, double x, double y, double z) -> PixelD
        """
        this = _ilwisobjects.new_PixelD(*args)
        try: self.this.append(this)
        except: self.this = this
    def x(self):
        """x(PixelD self) -> double"""
        return _ilwisobjects.PixelD_x(self)

    def y(self):
        """y(PixelD self) -> double"""
        return _ilwisobjects.PixelD_y(self)

    def z(self):
        """z(PixelD self) -> double"""
        return _ilwisobjects.PixelD_z(self)

    def setX(self, *args):
        """setX(PixelD self, double v)"""
        return _ilwisobjects.PixelD_setX(self, *args)

    def setY(self, *args):
        """setY(PixelD self, double v)"""
        return _ilwisobjects.PixelD_setY(self, *args)

    def setZ(self, *args):
        """setZ(PixelD self, double v)"""
        return _ilwisobjects.PixelD_setZ(self, *args)

    def is3D(self):
        """is3D(PixelD self) -> bool"""
        return _ilwisobjects.PixelD_is3D(self)

    def __imul__(self, *args):
        """__imul__(PixelD self, double n) -> PixelD"""
        return _ilwisobjects.PixelD___imul__(self, *args)

    def __itruediv__(self, *args):
        """__itruediv__(PixelD self, double n) -> PixelD"""
        return _ilwisobjects.PixelD___itruediv__(self, *args)

    def __eq__(self, *args):
        """__eq__(PixelD self, PixelD other) -> bool"""
        return _ilwisobjects.PixelD___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(PixelD self, PixelD other) -> bool"""
        return _ilwisobjects.PixelD___ne__(self, *args)

    def __str__(self):
        """__str__(PixelD self) -> std::string"""
        return _ilwisobjects.PixelD___str__(self)

    def __bool__(self):
        """__bool__(PixelD self) -> bool"""
        return _ilwisobjects.PixelD___bool__(self)

    __swig_getmethods__["x"] = x
    __swig_getmethods__["y"] = y
    __swig_getmethods__["z"] = z
    __swig_setmethods__["x"] = setX
    __swig_setmethods__["y"] = setY
    __swig_setmethods__["z"] = setZ
    if _newclass:
        x = property(x,setX)
        y = property(y,setY)
        z = property(z,setZ)

    __swig_destroy__ = _ilwisobjects.delete_PixelD
    __del__ = lambda self : None;
PixelD_swigregister = _ilwisobjects.PixelD_swigregister
PixelD_swigregister(PixelD)

class Size(_object):
    """Proxy of C++ pythonapi::SizeTemplate<(quint32)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Size, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Size, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pythonapi::SizeTemplate<(quint32)> self, unsigned int xsize, unsigned int ysize, unsigned int zsize=1) -> Size
        __init__(pythonapi::SizeTemplate<(quint32)> self, unsigned int xsize, unsigned int ysize) -> Size
        __init__(pythonapi::SizeTemplate<(quint32)> self, Size size) -> Size
        __init__(pythonapi::SizeTemplate<(quint32)> self, SizeD size) -> Size
        """
        this = _ilwisobjects.new_Size(*args)
        try: self.this.append(this)
        except: self.this = this
    def xsize(self):
        """xsize(Size self) -> unsigned int"""
        return _ilwisobjects.Size_xsize(self)

    def ysize(self):
        """ysize(Size self) -> unsigned int"""
        return _ilwisobjects.Size_ysize(self)

    def zsize(self):
        """zsize(Size self) -> unsigned int"""
        return _ilwisobjects.Size_zsize(self)

    def setXsize(self, *args):
        """setXsize(Size self, unsigned int x)"""
        return _ilwisobjects.Size_setXsize(self, *args)

    def setYsize(self, *args):
        """setYsize(Size self, unsigned int y)"""
        return _ilwisobjects.Size_setYsize(self, *args)

    def setZsize(self, *args):
        """setZsize(Size self, unsigned int z)"""
        return _ilwisobjects.Size_setZsize(self, *args)

    def linearSize(self):
        """linearSize(Size self) -> quint64"""
        return _ilwisobjects.Size_linearSize(self)

    def __iadd__(self, *args):
        """__iadd__(Size self, Size sz) -> Size"""
        return _ilwisobjects.Size___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(Size self, Size sz) -> Size"""
        return _ilwisobjects.Size___isub__(self, *args)

    def __imul__(self, *args):
        """__imul__(Size self, double f) -> Size"""
        return _ilwisobjects.Size___imul__(self, *args)

    def __eq__(self, *args):
        """__eq__(Size self, Size sz) -> bool"""
        return _ilwisobjects.Size___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Size self, Size sz) -> bool"""
        return _ilwisobjects.Size___ne__(self, *args)

    def __contains__(self, *args):
        """
        __contains__(Size self, Coordinate pix) -> bool
        __contains__(Size self, Pixel pix) -> bool
        __contains__(Size self, PixelD pix) -> bool
        """
        return _ilwisobjects.Size___contains__(self, *args)

    def __str__(self):
        """__str__(Size self) -> std::string"""
        return _ilwisobjects.Size___str__(self)

    def __bool__(self):
        """__bool__(Size self) -> bool"""
        return _ilwisobjects.Size___bool__(self)

    __swig_getmethods__["xsize"] = xsize
    __swig_getmethods__["ysize"] = ysize
    __swig_getmethods__["zsize"] = zsize
    __swig_setmethods__["xsize"] = setXsize
    __swig_setmethods__["ysize"] = setYsize
    __swig_setmethods__["zsize"] = setZsize
    if _newclass:
        xsize = property(xsize,setXsize)
        ysize = property(ysize,setYsize)
        zsize = property(zsize,setZsize)

    __swig_destroy__ = _ilwisobjects.delete_Size
    __del__ = lambda self : None;
Size_swigregister = _ilwisobjects.Size_swigregister
Size_swigregister(Size)

class SizeD(_object):
    """Proxy of C++ pythonapi::SizeTemplate<(double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SizeD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SizeD, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pythonapi::SizeTemplate<(double)> self, double xsize, double ysize, double zsize=1) -> SizeD
        __init__(pythonapi::SizeTemplate<(double)> self, double xsize, double ysize) -> SizeD
        __init__(pythonapi::SizeTemplate<(double)> self, Size size) -> SizeD
        __init__(pythonapi::SizeTemplate<(double)> self, SizeD size) -> SizeD
        """
        this = _ilwisobjects.new_SizeD(*args)
        try: self.this.append(this)
        except: self.this = this
    def xsize(self):
        """xsize(SizeD self) -> double"""
        return _ilwisobjects.SizeD_xsize(self)

    def ysize(self):
        """ysize(SizeD self) -> double"""
        return _ilwisobjects.SizeD_ysize(self)

    def zsize(self):
        """zsize(SizeD self) -> double"""
        return _ilwisobjects.SizeD_zsize(self)

    def setXsize(self, *args):
        """setXsize(SizeD self, double x)"""
        return _ilwisobjects.SizeD_setXsize(self, *args)

    def setYsize(self, *args):
        """setYsize(SizeD self, double y)"""
        return _ilwisobjects.SizeD_setYsize(self, *args)

    def setZsize(self, *args):
        """setZsize(SizeD self, double z)"""
        return _ilwisobjects.SizeD_setZsize(self, *args)

    def linearSize(self):
        """linearSize(SizeD self) -> quint64"""
        return _ilwisobjects.SizeD_linearSize(self)

    def __iadd__(self, *args):
        """__iadd__(SizeD self, SizeD sz) -> SizeD"""
        return _ilwisobjects.SizeD___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(SizeD self, SizeD sz) -> SizeD"""
        return _ilwisobjects.SizeD___isub__(self, *args)

    def __imul__(self, *args):
        """__imul__(SizeD self, double f) -> SizeD"""
        return _ilwisobjects.SizeD___imul__(self, *args)

    def __eq__(self, *args):
        """__eq__(SizeD self, SizeD sz) -> bool"""
        return _ilwisobjects.SizeD___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(SizeD self, SizeD sz) -> bool"""
        return _ilwisobjects.SizeD___ne__(self, *args)

    def __contains__(self, *args):
        """
        __contains__(SizeD self, Coordinate pix) -> bool
        __contains__(SizeD self, Pixel pix) -> bool
        __contains__(SizeD self, PixelD pix) -> bool
        """
        return _ilwisobjects.SizeD___contains__(self, *args)

    def __str__(self):
        """__str__(SizeD self) -> std::string"""
        return _ilwisobjects.SizeD___str__(self)

    def __bool__(self):
        """__bool__(SizeD self) -> bool"""
        return _ilwisobjects.SizeD___bool__(self)

    __swig_getmethods__["xsize"] = xsize
    __swig_getmethods__["ysize"] = ysize
    __swig_getmethods__["zsize"] = zsize
    __swig_setmethods__["xsize"] = setXsize
    __swig_setmethods__["ysize"] = setYsize
    __swig_setmethods__["zsize"] = setZsize
    if _newclass:
        xsize = property(xsize,setXsize)
        ysize = property(ysize,setYsize)
        zsize = property(zsize,setZsize)

    __swig_destroy__ = _ilwisobjects.delete_SizeD
    __del__ = lambda self : None;
SizeD_swigregister = _ilwisobjects.SizeD_swigregister
SizeD_swigregister(SizeD)

class Box(_object):
    """Proxy of C++ pythonapi::BoxTemplate<(Ilwis::Location<(qint32,false)>,pythonapi::PixelTemplate<(qint32)>,quint32)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Box, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Box, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pythonapi::BoxTemplate<(Ilwis::Location<(qint32,false)>,pythonapi::PixelTemplate<(qint32)>,quint32)> self) -> Box
        __init__(pythonapi::BoxTemplate<(Ilwis::Location<(qint32,false)>,pythonapi::PixelTemplate<(qint32)>,quint32)> self, std::string const & envelope) -> Box
        __init__(pythonapi::BoxTemplate<(Ilwis::Location<(qint32,false)>,pythonapi::PixelTemplate<(qint32)>,quint32)> self, Pixel min, Pixel max) -> Box
        __init__(pythonapi::BoxTemplate<(Ilwis::Location<(qint32,false)>,pythonapi::PixelTemplate<(qint32)>,quint32)> self, Size size) -> Box
        """
        this = _ilwisobjects.new_Box(*args)
        try: self.this.append(this)
        except: self.this = this
    def minCorner(self):
        """minCorner(Box self) -> Pixel"""
        return _ilwisobjects.Box_minCorner(self)

    def maxCorner(self):
        """maxCorner(Box self) -> Pixel"""
        return _ilwisobjects.Box_maxCorner(self)

    def size(self):
        """size(Box self) -> Size"""
        return _ilwisobjects.Box_size(self)

    def is3D(self):
        """is3D(Box self) -> bool"""
        return _ilwisobjects.Box_is3D(self)

    def __contains__(self, *args):
        """
        __contains__(Box self, Pixel point) -> bool
        __contains__(Box self, Box box) -> bool
        """
        return _ilwisobjects.Box___contains__(self, *args)

    def __eq__(self, *args):
        """__eq__(Box self, Box other) -> bool"""
        return _ilwisobjects.Box___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Box self, Box other) -> bool"""
        return _ilwisobjects.Box___ne__(self, *args)

    def __str__(self):
        """__str__(Box self) -> std::string"""
        return _ilwisobjects.Box___str__(self)

    def __bool__(self):
        """__bool__(Box self) -> bool"""
        return _ilwisobjects.Box___bool__(self)

    __swig_destroy__ = _ilwisobjects.delete_Box
    __del__ = lambda self : None;
Box_swigregister = _ilwisobjects.Box_swigregister
Box_swigregister(Box)

class Envelope(_object):
    """Proxy of C++ pythonapi::BoxTemplate<(Ilwis::Coordinate,pythonapi::Coordinate,double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Envelope, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Envelope, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pythonapi::BoxTemplate<(Ilwis::Coordinate,pythonapi::Coordinate,double)> self) -> Envelope
        __init__(pythonapi::BoxTemplate<(Ilwis::Coordinate,pythonapi::Coordinate,double)> self, std::string const & envelope) -> Envelope
        __init__(pythonapi::BoxTemplate<(Ilwis::Coordinate,pythonapi::Coordinate,double)> self, Coordinate min, Coordinate max) -> Envelope
        __init__(pythonapi::BoxTemplate<(Ilwis::Coordinate,pythonapi::Coordinate,double)> self, SizeD size) -> Envelope
        """
        this = _ilwisobjects.new_Envelope(*args)
        try: self.this.append(this)
        except: self.this = this
    def minCorner(self):
        """minCorner(Envelope self) -> Coordinate"""
        return _ilwisobjects.Envelope_minCorner(self)

    def maxCorner(self):
        """maxCorner(Envelope self) -> Coordinate"""
        return _ilwisobjects.Envelope_maxCorner(self)

    def size(self):
        """size(Envelope self) -> SizeD"""
        return _ilwisobjects.Envelope_size(self)

    def is3D(self):
        """is3D(Envelope self) -> bool"""
        return _ilwisobjects.Envelope_is3D(self)

    def __contains__(self, *args):
        """
        __contains__(Envelope self, Coordinate point) -> bool
        __contains__(Envelope self, Envelope box) -> bool
        """
        return _ilwisobjects.Envelope___contains__(self, *args)

    def __eq__(self, *args):
        """__eq__(Envelope self, Envelope other) -> bool"""
        return _ilwisobjects.Envelope___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Envelope self, Envelope other) -> bool"""
        return _ilwisobjects.Envelope___ne__(self, *args)

    def __str__(self):
        """__str__(Envelope self) -> std::string"""
        return _ilwisobjects.Envelope___str__(self)

    def __bool__(self):
        """__bool__(Envelope self) -> bool"""
        return _ilwisobjects.Envelope___bool__(self)

    __swig_destroy__ = _ilwisobjects.delete_Envelope
    __del__ = lambda self : None;
Envelope_swigregister = _ilwisobjects.Envelope_swigregister
Envelope_swigregister(Envelope)

class Geometry(Object):
    """Proxy of C++ pythonapi::Geometry class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Geometry, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Geometry, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pythonapi::Geometry self, std::string wkt, CoordinateSystem csy) -> Geometry
        __init__(pythonapi::Geometry self, Feature feature, int index) -> Geometry
        """
        this = _ilwisobjects.new_Geometry(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ilwisobjects.delete_Geometry
    __del__ = lambda self : None;
    def __bool__(self):
        """__bool__(Geometry self) -> bool"""
        return _ilwisobjects.Geometry___bool__(self)

    def __str__(self):
        """__str__(Geometry self) -> std::string"""
        return _ilwisobjects.Geometry___str__(self)

    def ilwisType(self):
        """ilwisType(Geometry self) -> IlwisTypes"""
        return _ilwisobjects.Geometry_ilwisType(self)

    def fromWKT(self, *args):
        """fromWKT(Geometry self, std::string const & wkt)"""
        return _ilwisobjects.Geometry_fromWKT(self, *args)

    def fromWKTReader(self, *args):
        """fromWKTReader(Geometry self, std::string const & wkt) -> geos::geom::Geometry *"""
        return _ilwisobjects.Geometry_fromWKTReader(self, *args)

    def toWKT(self):
        """toWKT(Geometry self) -> std::string"""
        return _ilwisobjects.Geometry_toWKT(self)

    def coordinateSystem(self):
        """coordinateSystem(Geometry self) -> CoordinateSystem"""
        return _ilwisobjects.Geometry_coordinateSystem(self)

    def setCoordinateSystem(self, *args):
        """setCoordinateSystem(Geometry self, CoordinateSystem cs)"""
        return _ilwisobjects.Geometry_setCoordinateSystem(self, *args)

    def transform(self, *args):
        """transform(Geometry self, CoordinateSystem cs) -> Geometry"""
        return _ilwisobjects.Geometry_transform(self, *args)

    def envelope(self):
        """envelope(Geometry self) -> Envelope"""
        return _ilwisobjects.Geometry_envelope(self)

    def isSimple(self):
        """isSimple(Geometry self) -> bool"""
        return _ilwisobjects.Geometry_isSimple(self)

    def within(self, *args):
        """within(Geometry self, Geometry geometry) -> bool"""
        return _ilwisobjects.Geometry_within(self, *args)

    def contains(self, *args):
        """contains(Geometry self, Geometry geometry) -> bool"""
        return _ilwisobjects.Geometry_contains(self, *args)

    def disjoint(self, *args):
        """disjoint(Geometry self, Geometry geometry) -> bool"""
        return _ilwisobjects.Geometry_disjoint(self, *args)

    def touches(self, *args):
        """touches(Geometry self, Geometry geometry) -> bool"""
        return _ilwisobjects.Geometry_touches(self, *args)

    def intersects(self, *args):
        """intersects(Geometry self, Geometry geometry) -> bool"""
        return _ilwisobjects.Geometry_intersects(self, *args)

    def crosses(self, *args):
        """crosses(Geometry self, Geometry geometry) -> bool"""
        return _ilwisobjects.Geometry_crosses(self, *args)

    def overlaps(self, *args):
        """overlaps(Geometry self, Geometry geometry) -> bool"""
        return _ilwisobjects.Geometry_overlaps(self, *args)

    def equals(self, *args):
        """equals(Geometry self, Geometry geometry) -> bool"""
        return _ilwisobjects.Geometry_equals(self, *args)

    def equalsExact(self, *args):
        """
        equalsExact(Geometry self, Geometry geometry, double tolerance=0) -> bool
        equalsExact(Geometry self, Geometry geometry) -> bool
        """
        return _ilwisobjects.Geometry_equalsExact(self, *args)

    def covers(self, *args):
        """covers(Geometry self, Geometry geometry) -> bool"""
        return _ilwisobjects.Geometry_covers(self, *args)

    def coveredBy(self, *args):
        """coveredBy(Geometry self, Geometry geometry) -> bool"""
        return _ilwisobjects.Geometry_coveredBy(self, *args)

    def relate(self, *args):
        """relate(Geometry self, Geometry geometry, std::string const & DE9IM_pattern) -> bool"""
        return _ilwisobjects.Geometry_relate(self, *args)

    def distance(self, *args):
        """distance(Geometry self, Geometry geometry) -> double"""
        return _ilwisobjects.Geometry_distance(self, *args)

    def getArea(self):
        """getArea(Geometry self) -> double"""
        return _ilwisobjects.Geometry_getArea(self)

    def getLength(self):
        """getLength(Geometry self) -> double"""
        return _ilwisobjects.Geometry_getLength(self)

    def isWithinDistance(self, *args):
        """isWithinDistance(Geometry self, Geometry geometry, double cDistance) -> bool"""
        return _ilwisobjects.Geometry_isWithinDistance(self, *args)

    def buffer(self, *args):
        """buffer(Geometry self, double distance) -> Geometry"""
        return _ilwisobjects.Geometry_buffer(self, *args)

    def convexHull(self):
        """convexHull(Geometry self) -> Geometry"""
        return _ilwisobjects.Geometry_convexHull(self)

    def intersection(self, *args):
        """intersection(Geometry self, Geometry geometry) -> Geometry"""
        return _ilwisobjects.Geometry_intersection(self, *args)

    def Union(self, *args):
        """Union(Geometry self, Geometry geometry) -> Geometry"""
        return _ilwisobjects.Geometry_Union(self, *args)

    def difference(self, *args):
        """difference(Geometry self, Geometry geometry) -> Geometry"""
        return _ilwisobjects.Geometry_difference(self, *args)

    def symDifference(self, *args):
        """symDifference(Geometry self, Geometry geometry) -> Geometry"""
        return _ilwisobjects.Geometry_symDifference(self, *args)

Geometry_swigregister = _ilwisobjects.Geometry_swigregister
Geometry_swigregister(Geometry)

class Feature(Object):
    """Proxy of C++ pythonapi::Feature class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Feature, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Feature, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __bool__(self):
        """__bool__(Feature self) -> bool"""
        return _ilwisobjects.Feature___bool__(self)

    def __str__(self):
        """__str__(Feature self) -> std::string"""
        return _ilwisobjects.Feature___str__(self)

    def id(self):
        """id(Feature self) -> quint64"""
        return _ilwisobjects.Feature_id(self)

    def __getitem__(self, *args):
        """
        __getitem__(Feature self, std::string name) -> PyObject
        __getitem__(Feature self, quint32 colIndex) -> PyObject *
        """
        return _ilwisobjects.Feature___getitem__(self, *args)

    def attribute(self, *args):
        """
        attribute(Feature self, std::string name, qint64 defaultValue, int index=COVERAGEATRIB) -> PyObject
        attribute(Feature self, std::string name, qint64 defaultValue) -> PyObject
        attribute(Feature self, std::string name, double defaultValue, int index=COVERAGEATRIB) -> PyObject
        attribute(Feature self, std::string name, double defaultValue) -> PyObject
        attribute(Feature self, std::string name, std::string defaultValue, int index=COVERAGEATRIB) -> PyObject
        attribute(Feature self, std::string name, std::string defaultValue) -> PyObject *
        """
        return _ilwisobjects.Feature_attribute(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(Feature self, std::string name, PyObject const * value)
        __setitem__(Feature self, std::string name, qint64 value)
        __setitem__(Feature self, std::string name, double value)
        __setitem__(Feature self, std::string name, std::string value)
        """
        return _ilwisobjects.Feature___setitem__(self, *args)

    def setAttribute(self, *args):
        """
        setAttribute(Feature self, std::string name, PyObject const * value, int index=COVERAGEATRIB)
        setAttribute(Feature self, std::string name, PyObject const * value)
        setAttribute(Feature self, std::string name, qint64 value, int index=COVERAGEATRIB)
        setAttribute(Feature self, std::string name, qint64 value)
        setAttribute(Feature self, std::string name, double value, int index=COVERAGEATRIB)
        setAttribute(Feature self, std::string name, double value)
        setAttribute(Feature self, std::string name, std::string value, int index=COVERAGEATRIB)
        setAttribute(Feature self, std::string name, std::string value)
        """
        return _ilwisobjects.Feature_setAttribute(self, *args)

    def ilwisType(self):
        """ilwisType(Feature self) -> IlwisTypes"""
        return _ilwisobjects.Feature_ilwisType(self)

    def geometry(self, index=0):
        """
        geometry(Feature self, int index=0) -> Geometry
        geometry(Feature self) -> Geometry
        """
        return _ilwisobjects.Feature_geometry(self, index)

    def setGeometry(self, *args):
        """
        setGeometry(Feature self, Geometry geometry, int index=COVERAGEATRIB)
        setGeometry(Feature self, Geometry geometry)
        """
        return _ilwisobjects.Feature_setGeometry(self, *args)

    __swig_destroy__ = _ilwisobjects.delete_Feature
    __del__ = lambda self : None;
Feature_swigregister = _ilwisobjects.Feature_swigregister
Feature_swigregister(Feature)
cvar = _ilwisobjects.cvar
COVERAGEATRIB = cvar.COVERAGEATRIB

class FeatureIterator(_object):
    """Proxy of C++ pythonapi::FeatureIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FeatureIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FeatureIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pythonapi::FeatureIterator self, FeatureCoverage fc) -> FeatureIterator
        __init__(pythonapi::FeatureIterator self, FeatureIterator it) -> FeatureIterator
        """
        this = _ilwisobjects.new_FeatureIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def __next__(self):
        """__next__(FeatureIterator self) -> Feature"""
        return _ilwisobjects.FeatureIterator___next__(self)

    def current(self):
        """current(FeatureIterator self) -> Feature"""
        return _ilwisobjects.FeatureIterator_current(self)

    def __iter__(self):
        """__iter__(FeatureIterator self) -> FeatureIterator"""
        return _ilwisobjects.FeatureIterator___iter__(self)

    def __str__(self):
        """__str__(FeatureIterator self) -> std::string"""
        return _ilwisobjects.FeatureIterator___str__(self)

    def __bool__(self):
        """__bool__(FeatureIterator self) -> bool"""
        return _ilwisobjects.FeatureIterator___bool__(self)

    def __eq__(self, *args):
        """__eq__(FeatureIterator self, FeatureIterator other) -> bool"""
        return _ilwisobjects.FeatureIterator___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(FeatureIterator self, FeatureIterator other) -> bool"""
        return _ilwisobjects.FeatureIterator___ne__(self, *args)

    def __add__(self, *args):
        """__add__(FeatureIterator self, int n) -> FeatureIterator"""
        return _ilwisobjects.FeatureIterator___add__(self, *args)

    def __radd__(self, *args):
        """__radd__(FeatureIterator self, int n) -> FeatureIterator"""
        return _ilwisobjects.FeatureIterator___radd__(self, *args)

    def __sub__(self, *args):
        """__sub__(FeatureIterator self, int n) -> FeatureIterator"""
        return _ilwisobjects.FeatureIterator___sub__(self, *args)

    __swig_destroy__ = _ilwisobjects.delete_FeatureIterator
    __del__ = lambda self : None;
FeatureIterator_swigregister = _ilwisobjects.FeatureIterator_swigregister
FeatureIterator_swigregister(FeatureIterator)

class FeatureCoverage(Coverage):
    """Proxy of C++ pythonapi::FeatureCoverage class"""
    __swig_setmethods__ = {}
    for _s in [Coverage]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FeatureCoverage, name, value)
    __swig_getmethods__ = {}
    for _s in [Coverage]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FeatureCoverage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pythonapi::FeatureCoverage self) -> FeatureCoverage
        __init__(pythonapi::FeatureCoverage self, std::string resource) -> FeatureCoverage
        """
        this = _ilwisobjects.new_FeatureCoverage(*args)
        try: self.this.append(this)
        except: self.this = this
    def __iter__(self):
        """__iter__(FeatureCoverage self) -> FeatureIterator"""
        return _ilwisobjects.FeatureCoverage___iter__(self)

    def featureTypes(self):
        """featureTypes(FeatureCoverage self) -> IlwisTypes"""
        return _ilwisobjects.FeatureCoverage_featureTypes(self)

    def featureCount(self):
        """featureCount(FeatureCoverage self) -> unsigned int"""
        return _ilwisobjects.FeatureCoverage_featureCount(self)

    def newFeature(self, *args):
        """newFeature(FeatureCoverage self, Geometry geometry) -> Feature"""
        return _ilwisobjects.FeatureCoverage_newFeature(self, *args)

    def toFeatureCoverage(*args):
        """toFeatureCoverage(Object obj) -> FeatureCoverage"""
        return _ilwisobjects.FeatureCoverage_toFeatureCoverage(*args)

    if _newclass:toFeatureCoverage = staticmethod(toFeatureCoverage)
    __swig_getmethods__["toFeatureCoverage"] = lambda x: toFeatureCoverage
    def select(self, *args):
        """select(FeatureCoverage self, std::string spatialQuery) -> PyObject *"""
        return _ilwisobjects.FeatureCoverage_select(self, *args)

    __swig_destroy__ = _ilwisobjects.delete_FeatureCoverage
    __del__ = lambda self : None;
FeatureCoverage_swigregister = _ilwisobjects.FeatureCoverage_swigregister
FeatureCoverage_swigregister(FeatureCoverage)

def FeatureCoverage_toFeatureCoverage(*args):
  """FeatureCoverage_toFeatureCoverage(Object obj) -> FeatureCoverage"""
  return _ilwisobjects.FeatureCoverage_toFeatureCoverage(*args)

class Flow(_object):
    """Proxy of C++ pythonapi::FlowVal class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Flow, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Flow, name)
    __repr__ = _swig_repr
    fXYZ = _ilwisobjects.Flow_fXYZ
    fYXZ = _ilwisobjects.Flow_fYXZ
    fXZY = _ilwisobjects.Flow_fXZY
    fYZX = _ilwisobjects.Flow_fYZX
    fZXY = _ilwisobjects.Flow_fZXY
    fZYX = _ilwisobjects.Flow_fZYX
    def __init__(self): 
        """__init__(pythonapi::FlowVal self) -> Flow"""
        this = _ilwisobjects.new_Flow()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ilwisobjects.delete_Flow
    __del__ = lambda self : None;
Flow_swigregister = _ilwisobjects.Flow_swigregister
Flow_swigregister(Flow)

class PixelIterator(_object):
    """Proxy of C++ pythonapi::PixelIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixelIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PixelIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pythonapi::PixelIterator self, PixelIterator pi) -> PixelIterator
        __init__(pythonapi::PixelIterator self, RasterCoverage rc, Box b=pythonapi::Box()) -> PixelIterator
        __init__(pythonapi::PixelIterator self, RasterCoverage rc) -> PixelIterator
        """
        this = _ilwisobjects.new_PixelIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ilwisobjects.delete_PixelIterator
    __del__ = lambda self : None;
    def __iter__(self):
        """__iter__(PixelIterator self) -> PixelIterator"""
        return _ilwisobjects.PixelIterator___iter__(self)

    def __next__(self):
        """__next__(PixelIterator self) -> double"""
        return _ilwisobjects.PixelIterator___next__(self)

    def __bool__(self):
        """__bool__(PixelIterator self) -> bool"""
        return _ilwisobjects.PixelIterator___bool__(self)

    def __str__(self):
        """__str__(PixelIterator self) -> std::string"""
        return _ilwisobjects.PixelIterator___str__(self)

    def __float__(self):
        """__float__(PixelIterator self) -> double"""
        return _ilwisobjects.PixelIterator___float__(self)

    def __int__(self):
        """__int__(PixelIterator self) -> quint64"""
        return _ilwisobjects.PixelIterator___int__(self)

    def __contains__(self, *args):
        """__contains__(PixelIterator self, Pixel vox) -> bool"""
        return _ilwisobjects.PixelIterator___contains__(self, *args)

    def box(self):
        """box(PixelIterator self) -> Box"""
        return _ilwisobjects.PixelIterator_box(self)

    def position(self):
        """position(PixelIterator self) -> Pixel"""
        return _ilwisobjects.PixelIterator_position(self)

    def setFlow(self, *args):
        """setFlow(PixelIterator self, pythonapi::Flow flw)"""
        return _ilwisobjects.PixelIterator_setFlow(self, *args)

    def xChanged(self):
        """xChanged(PixelIterator self) -> bool"""
        return _ilwisobjects.PixelIterator_xChanged(self)

    def yChanged(self):
        """yChanged(PixelIterator self) -> bool"""
        return _ilwisobjects.PixelIterator_yChanged(self)

    def zChanged(self):
        """zChanged(PixelIterator self) -> bool"""
        return _ilwisobjects.PixelIterator_zChanged(self)

    def __getitem__(self, *args):
        """
        __getitem__(PixelIterator self, Pixel vox) -> PixelIterator
        __getitem__(PixelIterator self, quint32 linearPosition) -> double
        """
        return _ilwisobjects.PixelIterator___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(PixelIterator self, quint32 linearPosition, double value)"""
        return _ilwisobjects.PixelIterator___setitem__(self, *args)

    def __add__(self, *args):
        """__add__(PixelIterator self, int n) -> PixelIterator"""
        return _ilwisobjects.PixelIterator___add__(self, *args)

    def __radd__(self, *args):
        """__radd__(PixelIterator self, int n) -> PixelIterator"""
        return _ilwisobjects.PixelIterator___radd__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(PixelIterator self, int n) -> PixelIterator"""
        return _ilwisobjects.PixelIterator___iadd__(self, *args)

    def __eq__(self, *args):
        """__eq__(PixelIterator self, PixelIterator other) -> bool"""
        return _ilwisobjects.PixelIterator___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(PixelIterator self, PixelIterator other) -> bool"""
        return _ilwisobjects.PixelIterator___ne__(self, *args)

    def __le__(self, *args):
        """__le__(PixelIterator self, PixelIterator other) -> bool"""
        return _ilwisobjects.PixelIterator___le__(self, *args)

    def __lt__(self, *args):
        """__lt__(PixelIterator self, PixelIterator other) -> bool"""
        return _ilwisobjects.PixelIterator___lt__(self, *args)

    def __ge__(self, *args):
        """__ge__(PixelIterator self, PixelIterator other) -> bool"""
        return _ilwisobjects.PixelIterator___ge__(self, *args)

    def __gt__(self, *args):
        """__gt__(PixelIterator self, PixelIterator other) -> bool"""
        return _ilwisobjects.PixelIterator___gt__(self, *args)

    def asBuffer(self):
        """asBuffer(PixelIterator self) -> Py_buffer *"""
        return _ilwisobjects.PixelIterator_asBuffer(self)

PixelIterator_swigregister = _ilwisobjects.PixelIterator_swigregister
PixelIterator_swigregister(PixelIterator)

class GeoReference(IlwisObject):
    """Proxy of C++ pythonapi::GeoReference class"""
    __swig_setmethods__ = {}
    for _s in [IlwisObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeoReference, name, value)
    __swig_getmethods__ = {}
    for _s in [IlwisObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeoReference, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(pythonapi::GeoReference self, std::string const & resource) -> GeoReference"""
        this = _ilwisobjects.new_GeoReference(*args)
        try: self.this.append(this)
        except: self.this = this
    def toGeoReference(*args):
        """toGeoReference(Object obj) -> GeoReference"""
        return _ilwisobjects.GeoReference_toGeoReference(*args)

    if _newclass:toGeoReference = staticmethod(toGeoReference)
    __swig_getmethods__["toGeoReference"] = lambda x: toGeoReference
    def coordinateSystem(self):
        """coordinateSystem(GeoReference self) -> CoordinateSystem"""
        return _ilwisobjects.GeoReference_coordinateSystem(self)

    def setCoordinateSystem(self, *args):
        """setCoordinateSystem(GeoReference self, CoordinateSystem csy)"""
        return _ilwisobjects.GeoReference_setCoordinateSystem(self, *args)

    def pixel2Coord(self, *args):
        """
        pixel2Coord(GeoReference self, PixelD pixel) -> Coordinate
        pixel2Coord(GeoReference self, Pixel pixel) -> Coordinate
        """
        return _ilwisobjects.GeoReference_pixel2Coord(self, *args)

    def coord2Pixel(self, *args):
        """coord2Pixel(GeoReference self, Coordinate coord) -> PixelD"""
        return _ilwisobjects.GeoReference_coord2Pixel(self, *args)

    def box2Envelope(self, *args):
        """box2Envelope(GeoReference self, Box box) -> Envelope"""
        return _ilwisobjects.GeoReference_box2Envelope(self, *args)

    def envelope2Box(self, *args):
        """envelope2Box(GeoReference self, Envelope box) -> Box"""
        return _ilwisobjects.GeoReference_envelope2Box(self, *args)

    def pixelSize(self):
        """pixelSize(GeoReference self) -> double"""
        return _ilwisobjects.GeoReference_pixelSize(self)

    def size(self, *args):
        """
        size(GeoReference self) -> Size
        size(GeoReference self, Size sz)
        """
        return _ilwisobjects.GeoReference_size(self, *args)

    def centerOfPixel(self, *args):
        """
        centerOfPixel(GeoReference self) -> bool
        centerOfPixel(GeoReference self, bool yesno)
        """
        return _ilwisobjects.GeoReference_centerOfPixel(self, *args)

    def isCompatible(self, *args):
        """isCompatible(GeoReference self, GeoReference other) -> bool"""
        return _ilwisobjects.GeoReference_isCompatible(self, *args)

    def isValid(self):
        """isValid(GeoReference self) -> bool"""
        return _ilwisobjects.GeoReference_isValid(self)

    def compute(self):
        """compute(GeoReference self) -> bool"""
        return _ilwisobjects.GeoReference_compute(self)

    def ilwisType(self):
        """ilwisType(GeoReference self) -> IlwisTypes"""
        return _ilwisobjects.GeoReference_ilwisType(self)

    __swig_destroy__ = _ilwisobjects.delete_GeoReference
    __del__ = lambda self : None;
GeoReference_swigregister = _ilwisobjects.GeoReference_swigregister
GeoReference_swigregister(GeoReference)

def GeoReference_toGeoReference(*args):
  """GeoReference_toGeoReference(Object obj) -> GeoReference"""
  return _ilwisobjects.GeoReference_toGeoReference(*args)

class RasterCoverage(Coverage):
    """Proxy of C++ pythonapi::RasterCoverage class"""
    __swig_setmethods__ = {}
    for _s in [Coverage]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RasterCoverage, name, value)
    __swig_getmethods__ = {}
    for _s in [Coverage]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RasterCoverage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pythonapi::RasterCoverage self) -> RasterCoverage
        __init__(pythonapi::RasterCoverage self, std::string resource) -> RasterCoverage
        """
        this = _ilwisobjects.new_RasterCoverage(*args)
        try: self.this.append(this)
        except: self.this = this
    def __add__(self, *args):
        """
        __add__(RasterCoverage self, RasterCoverage rc) -> RasterCoverage
        __add__(RasterCoverage self, double value) -> RasterCoverage
        """
        return _ilwisobjects.RasterCoverage___add__(self, *args)

    def __radd__(self, *args):
        """__radd__(RasterCoverage self, double value) -> RasterCoverage"""
        return _ilwisobjects.RasterCoverage___radd__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(RasterCoverage self, RasterCoverage rc) -> RasterCoverage
        __sub__(RasterCoverage self, double value) -> RasterCoverage
        """
        return _ilwisobjects.RasterCoverage___sub__(self, *args)

    def __rsub__(self, *args):
        """__rsub__(RasterCoverage self, double value) -> RasterCoverage"""
        return _ilwisobjects.RasterCoverage___rsub__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(RasterCoverage self, RasterCoverage rc) -> RasterCoverage
        __mul__(RasterCoverage self, double value) -> RasterCoverage
        """
        return _ilwisobjects.RasterCoverage___mul__(self, *args)

    def __rmul__(self, *args):
        """__rmul__(RasterCoverage self, double value) -> RasterCoverage"""
        return _ilwisobjects.RasterCoverage___rmul__(self, *args)

    def __truediv__(self, *args):
        """
        __truediv__(RasterCoverage self, RasterCoverage rc) -> RasterCoverage
        __truediv__(RasterCoverage self, double value) -> RasterCoverage
        """
        return _ilwisobjects.RasterCoverage___truediv__(self, *args)

    def __rtruediv__(self, *args):
        """__rtruediv__(RasterCoverage self, double value) -> RasterCoverage"""
        return _ilwisobjects.RasterCoverage___rtruediv__(self, *args)

    def __iter__(self):
        """__iter__(RasterCoverage self) -> PixelIterator"""
        return _ilwisobjects.RasterCoverage___iter__(self)

    def coord2value(self, *args):
        """coord2value(RasterCoverage self, Coordinate c) -> double"""
        return _ilwisobjects.RasterCoverage_coord2value(self, *args)

    def pix2value(self, *args):
        """
        pix2value(RasterCoverage self, Pixel pix) -> double
        pix2value(RasterCoverage self, PixelD pix) -> double
        """
        return _ilwisobjects.RasterCoverage_pix2value(self, *args)

    def size(self):
        """size(RasterCoverage self) -> Size"""
        return _ilwisobjects.RasterCoverage_size(self)

    def setSize(self, *args):
        """setSize(RasterCoverage self, Size sz)"""
        return _ilwisobjects.RasterCoverage_setSize(self, *args)

    def unloadBinary(self):
        """unloadBinary(RasterCoverage self)"""
        return _ilwisobjects.RasterCoverage_unloadBinary(self)

    def geoReference(self):
        """geoReference(RasterCoverage self) -> GeoReference"""
        return _ilwisobjects.RasterCoverage_geoReference(self)

    def setGeoReference(self, *args):
        """setGeoReference(RasterCoverage self, GeoReference gr)"""
        return _ilwisobjects.RasterCoverage_setGeoReference(self, *args)

    def datadef(self, *args):
        """
        datadef(RasterCoverage self, quint32 layer) -> pythonapi::DataDefinition const
        datadef(RasterCoverage self, quint32 layer) -> pythonapi::DataDefinition &
        """
        return _ilwisobjects.RasterCoverage_datadef(self, *args)

    def toRasterCoverage(*args):
        """toRasterCoverage(Object obj) -> RasterCoverage"""
        return _ilwisobjects.RasterCoverage_toRasterCoverage(*args)

    if _newclass:toRasterCoverage = staticmethod(toRasterCoverage)
    __swig_getmethods__["toRasterCoverage"] = lambda x: toRasterCoverage
    __swig_destroy__ = _ilwisobjects.delete_RasterCoverage
    __del__ = lambda self : None;
RasterCoverage_swigregister = _ilwisobjects.RasterCoverage_swigregister
RasterCoverage_swigregister(RasterCoverage)

def RasterCoverage_toRasterCoverage(*args):
  """RasterCoverage_toRasterCoverage(Object obj) -> RasterCoverage"""
  return _ilwisobjects.RasterCoverage_toRasterCoverage(*args)

class Catalog(Object):
    """Proxy of C++ pythonapi::Catalog class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Catalog, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Catalog, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pythonapi::Catalog self, std::string const & url, std::string const & filter="") -> Catalog
        __init__(pythonapi::Catalog self, std::string const & url) -> Catalog
        """
        this = _ilwisobjects.new_Catalog(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ilwisobjects.delete_Catalog
    __del__ = lambda self : None;
    def __bool__(self):
        """__bool__(Catalog self) -> bool"""
        return _ilwisobjects.Catalog___bool__(self)

    def __str__(self):
        """__str__(Catalog self) -> std::string"""
        return _ilwisobjects.Catalog___str__(self)

    def ilwisType(self):
        """ilwisType(Catalog self) -> IlwisTypes"""
        return _ilwisobjects.Catalog_ilwisType(self)

    def items(self):
        """items(Catalog self) -> PyObject *"""
        return _ilwisobjects.Catalog_items(self)

    def _getitem(self, *args):
        """_getitem(Catalog self, std::string const & name) -> Object"""
        return _ilwisobjects.Catalog__getitem(self, *args)

    def toCatalog(self, *args):
        """toCatalog(Catalog self, Object obj) -> Catalog"""
        return _ilwisobjects.Catalog_toCatalog(self, *args)

    def __getitem__(self, name):
        return object_cast(self._getitem(name))

Catalog_swigregister = _ilwisobjects.Catalog_swigregister
Catalog_swigregister(Catalog)

class Domain(IlwisObject):
    """Proxy of C++ pythonapi::Domain class"""
    __swig_setmethods__ = {}
    for _s in [IlwisObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Domain, name, value)
    __swig_getmethods__ = {}
    for _s in [IlwisObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Domain, name)
    __repr__ = _swig_repr
    cSELF = _ilwisobjects.Domain_cSELF
    cPARENT = _ilwisobjects.Domain_cPARENT
    cDECLARED = _ilwisobjects.Domain_cDECLARED
    cNONE = _ilwisobjects.Domain_cNONE
    def __init__(self): 
        """__init__(pythonapi::Domain self) -> Domain"""
        this = _ilwisobjects.new_Domain()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ilwisobjects.delete_Domain
    __del__ = lambda self : None;
    def isStrict(self):
        """isStrict(Domain self) -> bool"""
        return _ilwisobjects.Domain_isStrict(self)

    def setStrict(self, *args):
        """setStrict(Domain self, bool yesno)"""
        return _ilwisobjects.Domain_setStrict(self, *args)

    def impliedValue(self, *args):
        """impliedValue(Domain self, PyObject * value) -> PyObject *"""
        return _ilwisobjects.Domain_impliedValue(self, *args)

    def parent(self):
        """parent(Domain self) -> Domain"""
        return _ilwisobjects.Domain_parent(self)

    def setParent(self, *args):
        """setParent(Domain self, Domain dom)"""
        return _ilwisobjects.Domain_setParent(self, *args)

    def contains(self, *args):
        """contains(Domain self, PyObject * value) -> std::string"""
        return _ilwisobjects.Domain_contains(self, *args)

    def isCompatibleWith(self, *args):
        """isCompatibleWith(Domain self, Domain dom) -> bool"""
        return _ilwisobjects.Domain_isCompatibleWith(self, *args)

    def setRange(self, *args):
        """setRange(Domain self, Range rng)"""
        return _ilwisobjects.Domain_setRange(self, *args)

    def valueType(self):
        """valueType(Domain self) -> IlwisTypes"""
        return _ilwisobjects.Domain_valueType(self)

    def toDomain(*args):
        """toDomain(Object obj) -> Domain"""
        return _ilwisobjects.Domain_toDomain(*args)

    if _newclass:toDomain = staticmethod(toDomain)
    __swig_getmethods__["toDomain"] = lambda x: toDomain
Domain_swigregister = _ilwisobjects.Domain_swigregister
Domain_swigregister(Domain)

def Domain_toDomain(*args):
  """Domain_toDomain(Object obj) -> Domain"""
  return _ilwisobjects.Domain_toDomain(*args)

class NumericDomain(Domain):
    """Proxy of C++ pythonapi::NumericDomain class"""
    __swig_setmethods__ = {}
    for _s in [Domain]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NumericDomain, name, value)
    __swig_getmethods__ = {}
    for _s in [Domain]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NumericDomain, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pythonapi::NumericDomain self) -> NumericDomain
        __init__(pythonapi::NumericDomain self, std::string const & resource) -> NumericDomain
        """
        this = _ilwisobjects.new_NumericDomain(*args)
        try: self.this.append(this)
        except: self.this = this
    def toNumericDomain(*args):
        """toNumericDomain(Object obj) -> NumericDomain"""
        return _ilwisobjects.NumericDomain_toNumericDomain(*args)

    if _newclass:toNumericDomain = staticmethod(toNumericDomain)
    __swig_getmethods__["toNumericDomain"] = lambda x: toNumericDomain
    __swig_destroy__ = _ilwisobjects.delete_NumericDomain
    __del__ = lambda self : None;
NumericDomain_swigregister = _ilwisobjects.NumericDomain_swigregister
NumericDomain_swigregister(NumericDomain)

def NumericDomain_toNumericDomain(*args):
  """NumericDomain_toNumericDomain(Object obj) -> NumericDomain"""
  return _ilwisobjects.NumericDomain_toNumericDomain(*args)

class ItemDomain(Domain):
    """Proxy of C++ pythonapi::ItemDomain class"""
    __swig_setmethods__ = {}
    for _s in [Domain]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ItemDomain, name, value)
    __swig_getmethods__ = {}
    for _s in [Domain]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ItemDomain, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pythonapi::ItemDomain self) -> ItemDomain
        __init__(pythonapi::ItemDomain self, Range rng) -> ItemDomain
        """
        this = _ilwisobjects.new_ItemDomain(*args)
        try: self.this.append(this)
        except: self.this = this
    def count(self):
        """count(ItemDomain self) -> quint32"""
        return _ilwisobjects.ItemDomain_count(self)

    def setTheme(self, *args):
        """setTheme(ItemDomain self, std::string const & theme)"""
        return _ilwisobjects.ItemDomain_setTheme(self, *args)

    def theme(self):
        """theme(ItemDomain self) -> std::string"""
        return _ilwisobjects.ItemDomain_theme(self)

    def removeItem(self, *args):
        """removeItem(ItemDomain self, std::string const & nme)"""
        return _ilwisobjects.ItemDomain_removeItem(self, *args)

    def addItem(self, *args):
        """addItem(ItemDomain self, PyObject * value)"""
        return _ilwisobjects.ItemDomain_addItem(self, *args)

    def item(self, *args):
        """item(ItemDomain self, int index, bool labelOnly) -> PyObject *"""
        return _ilwisobjects.ItemDomain_item(self, *args)

    __swig_destroy__ = _ilwisobjects.delete_ItemDomain
    __del__ = lambda self : None;
ItemDomain_swigregister = _ilwisobjects.ItemDomain_swigregister
ItemDomain_swigregister(ItemDomain)

class ColorDomain(Domain):
    """Proxy of C++ pythonapi::ColorDomain class"""
    __swig_setmethods__ = {}
    for _s in [Domain]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorDomain, name, value)
    __swig_getmethods__ = {}
    for _s in [Domain]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ColorDomain, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pythonapi::ColorDomain self) -> ColorDomain
        __init__(pythonapi::ColorDomain self, std::string const & resource) -> ColorDomain
        """
        this = _ilwisobjects.new_ColorDomain(*args)
        try: self.this.append(this)
        except: self.this = this
    def ilwisType(self):
        """ilwisType(ColorDomain self) -> IlwisTypes"""
        return _ilwisobjects.ColorDomain_ilwisType(self)

    def containsColor(self, *args):
        """containsColor(ColorDomain self, Color value) -> std::string"""
        return _ilwisobjects.ColorDomain_containsColor(self, *args)

    __swig_destroy__ = _ilwisobjects.delete_ColorDomain
    __del__ = lambda self : None;
ColorDomain_swigregister = _ilwisobjects.ColorDomain_swigregister
ColorDomain_swigregister(ColorDomain)

class TextDomain(Domain):
    """Proxy of C++ pythonapi::TextDomain class"""
    __swig_setmethods__ = {}
    for _s in [Domain]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextDomain, name, value)
    __swig_getmethods__ = {}
    for _s in [Domain]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TextDomain, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pythonapi::TextDomain self) -> TextDomain
        __init__(pythonapi::TextDomain self, std::string const & resource) -> TextDomain
        """
        this = _ilwisobjects.new_TextDomain(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ilwisobjects.delete_TextDomain
    __del__ = lambda self : None;
TextDomain_swigregister = _ilwisobjects.TextDomain_swigregister
TextDomain_swigregister(TextDomain)

class TimeDomain(Domain):
    """Proxy of C++ pythonapi::TimeDomain class"""
    __swig_setmethods__ = {}
    for _s in [Domain]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeDomain, name, value)
    __swig_getmethods__ = {}
    for _s in [Domain]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TimeDomain, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pythonapi::TimeDomain self) -> TimeDomain
        __init__(pythonapi::TimeDomain self, std::string const & resource) -> TimeDomain
        __init__(pythonapi::TimeDomain self, Range rng) -> TimeDomain
        """
        this = _ilwisobjects.new_TimeDomain(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ilwisobjects.delete_TimeDomain
    __del__ = lambda self : None;
TimeDomain_swigregister = _ilwisobjects.TimeDomain_swigregister
TimeDomain_swigregister(TimeDomain)

class Range(Object):
    """Proxy of C++ pythonapi::Range class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Range, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Range, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __bool__(self):
        """__bool__(Range self) -> bool"""
        return _ilwisobjects.Range___bool__(self)

    def __str__(self):
        """__str__(Range self) -> std::string"""
        return _ilwisobjects.Range___str__(self)

    def ilwisType(self):
        """ilwisType(Range self) -> IlwisTypes"""
        return _ilwisobjects.Range_ilwisType(self)

    def valueType(self):
        """valueType(Range self) -> IlwisTypes"""
        return _ilwisobjects.Range_valueType(self)

    def ensure(self, *args):
        """
        ensure(Range self, PyObject const * v, bool inclusive=True) -> PyObject
        ensure(Range self, PyObject const * v) -> PyObject *
        """
        return _ilwisobjects.Range_ensure(self, *args)

    def contains(self, *args):
        """
        contains(Range self, PyObject const * value, bool inclusive=True) -> bool
        contains(Range self, PyObject const * value) -> bool
        """
        return _ilwisobjects.Range_contains(self, *args)

    def isContinuous(self):
        """isContinuous(Range self) -> bool"""
        return _ilwisobjects.Range_isContinuous(self)

    def impliedValue(self, *args):
        """impliedValue(Range self, PyObject const * value) -> PyObject *"""
        return _ilwisobjects.Range_impliedValue(self, *args)

    __swig_destroy__ = _ilwisobjects.delete_Range
    __del__ = lambda self : None;
Range_swigregister = _ilwisobjects.Range_swigregister
Range_swigregister(Range)

class NumericRange(Range):
    """Proxy of C++ pythonapi::NumericRange class"""
    __swig_setmethods__ = {}
    for _s in [Range]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NumericRange, name, value)
    __swig_getmethods__ = {}
    for _s in [Range]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NumericRange, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pythonapi::NumericRange self, double mi, double ma, double resolution=0) -> NumericRange
        __init__(pythonapi::NumericRange self, double mi, double ma) -> NumericRange
        __init__(pythonapi::NumericRange self, NumericRange vr) -> NumericRange
        """
        this = _ilwisobjects.new_NumericRange(*args)
        try: self.this.append(this)
        except: self.this = this
    def contains(self, *args):
        """
        contains(NumericRange self, double v, bool inclusive=True) -> bool
        contains(NumericRange self, double v) -> bool
        """
        return _ilwisobjects.NumericRange_contains(self, *args)

    def max(self):
        """max(NumericRange self) -> double"""
        return _ilwisobjects.NumericRange_max(self)

    def setMax(self, *args):
        """setMax(NumericRange self, double v)"""
        return _ilwisobjects.NumericRange_setMax(self, *args)

    def min(self):
        """min(NumericRange self) -> double"""
        return _ilwisobjects.NumericRange_min(self)

    def setMin(self, *args):
        """setMin(NumericRange self, double v)"""
        return _ilwisobjects.NumericRange_setMin(self, *args)

    def distance(self):
        """distance(NumericRange self) -> double"""
        return _ilwisobjects.NumericRange_distance(self)

    def setResolution(self, *args):
        """setResolution(NumericRange self, double resolution)"""
        return _ilwisobjects.NumericRange_setResolution(self, *args)

    def resolution(self):
        """resolution(NumericRange self) -> double"""
        return _ilwisobjects.NumericRange_resolution(self)

    def set(self, *args):
        """set(NumericRange self, NumericRange vr)"""
        return _ilwisobjects.NumericRange_set(self, *args)

    def clear(self):
        """clear(NumericRange self)"""
        return _ilwisobjects.NumericRange_clear(self)

    __swig_destroy__ = _ilwisobjects.delete_NumericRange
    __del__ = lambda self : None;
NumericRange_swigregister = _ilwisobjects.NumericRange_swigregister
NumericRange_swigregister(NumericRange)

class ItemRange(Range):
    """Proxy of C++ pythonapi::ItemRange class"""
    __swig_setmethods__ = {}
    for _s in [Range]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ItemRange, name, value)
    __swig_getmethods__ = {}
    for _s in [Range]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ItemRange, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def add(self, *args):
        """add(ItemRange self, PyObject * dItem)"""
        return _ilwisobjects.ItemRange_add(self, *args)

    def count(self):
        """count(ItemRange self)"""
        return _ilwisobjects.ItemRange_count(self)

    def remove(self, *args):
        """remove(ItemRange self, std::string const & name)"""
        return _ilwisobjects.ItemRange_remove(self, *args)

    def clear(self):
        """clear(ItemRange self)"""
        return _ilwisobjects.ItemRange_clear(self)

    __swig_destroy__ = _ilwisobjects.delete_ItemRange
    __del__ = lambda self : None;
ItemRange_swigregister = _ilwisobjects.ItemRange_swigregister
ItemRange_swigregister(ItemRange)

class NumericItemRange(ItemRange):
    """Proxy of C++ pythonapi::NumericItemRange class"""
    __swig_setmethods__ = {}
    for _s in [ItemRange]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NumericItemRange, name, value)
    __swig_getmethods__ = {}
    for _s in [ItemRange]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NumericItemRange, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(pythonapi::NumericItemRange self) -> NumericItemRange"""
        this = _ilwisobjects.new_NumericItemRange()
        try: self.this.append(this)
        except: self.this = this
    def add(self, *args):
        """
        add(NumericItemRange self, std::string name, double min, double max, double resolution=0)
        add(NumericItemRange self, std::string name, double min, double max)
        add(NumericItemRange self, PyObject * item)
        """
        return _ilwisobjects.NumericItemRange_add(self, *args)

    def index(self, *args):
        """index(NumericItemRange self, double arg2) -> double"""
        return _ilwisobjects.NumericItemRange_index(self, *args)

    def gotoIndex(self, *args):
        """gotoIndex(NumericItemRange self, qint32 index, qint32 step) -> qint32"""
        return _ilwisobjects.NumericItemRange_gotoIndex(self, *args)

    def clone(self):
        """clone(NumericItemRange self) -> NumericItemRange"""
        return _ilwisobjects.NumericItemRange_clone(self)

    __swig_destroy__ = _ilwisobjects.delete_NumericItemRange
    __del__ = lambda self : None;
NumericItemRange_swigregister = _ilwisobjects.NumericItemRange_swigregister
NumericItemRange_swigregister(NumericItemRange)

class NamedItemRange(ItemRange):
    """Proxy of C++ pythonapi::NamedItemRange class"""
    __swig_setmethods__ = {}
    for _s in [ItemRange]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedItemRange, name, value)
    __swig_getmethods__ = {}
    for _s in [ItemRange]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedItemRange, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(pythonapi::NamedItemRange self) -> NamedItemRange"""
        this = _ilwisobjects.new_NamedItemRange()
        try: self.this.append(this)
        except: self.this = this
    def add(self, *args):
        """add(NamedItemRange self, PyObject * item)"""
        return _ilwisobjects.NamedItemRange_add(self, *args)

    def gotoIndex(self, *args):
        """gotoIndex(NamedItemRange self, qint32 index, qint32 step) -> qint32"""
        return _ilwisobjects.NamedItemRange_gotoIndex(self, *args)

    def clone(self):
        """clone(NamedItemRange self) -> NamedItemRange"""
        return _ilwisobjects.NamedItemRange_clone(self)

    __swig_destroy__ = _ilwisobjects.delete_NamedItemRange
    __del__ = lambda self : None;
NamedItemRange_swigregister = _ilwisobjects.NamedItemRange_swigregister
NamedItemRange_swigregister(NamedItemRange)

class ThematicRange(ItemRange):
    """Proxy of C++ pythonapi::ThematicRange class"""
    __swig_setmethods__ = {}
    for _s in [ItemRange]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThematicRange, name, value)
    __swig_getmethods__ = {}
    for _s in [ItemRange]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ThematicRange, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(pythonapi::ThematicRange self) -> ThematicRange"""
        this = _ilwisobjects.new_ThematicRange()
        try: self.this.append(this)
        except: self.this = this
    def add(self, *args):
        """
        add(ThematicRange self, std::string name, std::string id="", std::string descr="")
        add(ThematicRange self, std::string name, std::string id="")
        add(ThematicRange self, std::string name)
        add(ThematicRange self, PyObject * item)
        """
        return _ilwisobjects.ThematicRange_add(self, *args)

    def clone(self):
        """clone(ThematicRange self) -> ThematicRange"""
        return _ilwisobjects.ThematicRange_clone(self)

    __swig_destroy__ = _ilwisobjects.delete_ThematicRange
    __del__ = lambda self : None;
ThematicRange_swigregister = _ilwisobjects.ThematicRange_swigregister
ThematicRange_swigregister(ThematicRange)

class ColorModel(_object):
    """Proxy of C++ pythonapi::ColorModelNS class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColorModel, name)
    __repr__ = _swig_repr
    cmRGBA = _ilwisobjects.ColorModel_cmRGBA
    cmHSLA = _ilwisobjects.ColorModel_cmHSLA
    cmCYMKA = _ilwisobjects.ColorModel_cmCYMKA
    cmGREYSCALE = _ilwisobjects.ColorModel_cmGREYSCALE
    def __init__(self): 
        """__init__(pythonapi::ColorModelNS self) -> ColorModel"""
        this = _ilwisobjects.new_ColorModel()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ilwisobjects.delete_ColorModel
    __del__ = lambda self : None;
ColorModel_swigregister = _ilwisobjects.ColorModel_swigregister
ColorModel_swigregister(ColorModel)

class Color(_object):
    """Proxy of C++ pythonapi::Color class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Color, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Color, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pythonapi::Color self) -> Color
        __init__(pythonapi::Color self, pythonapi::ColorModel type, PyObject * obj) -> Color
        """
        this = _ilwisobjects.new_Color(*args)
        try: self.this.append(this)
        except: self.this = this
    def readColor(self, *args):
        """readColor(Color self, pythonapi::ColorModel type, PyObject * obj)"""
        return _ilwisobjects.Color_readColor(self, *args)

    def getItem(self, *args):
        """getItem(Color self, std::string key) -> double"""
        return _ilwisobjects.Color_getItem(self, *args)

    def getColorModel(self):
        """getColorModel(Color self) -> pythonapi::ColorModel"""
        return _ilwisobjects.Color_getColorModel(self)

    def toString(self):
        """toString(Color self) -> std::string"""
        return _ilwisobjects.Color_toString(self)

    __swig_destroy__ = _ilwisobjects.delete_Color
    __del__ = lambda self : None;
Color_swigregister = _ilwisobjects.Color_swigregister
Color_swigregister(Color)

class ColorRange(Range):
    """Proxy of C++ pythonapi::ColorRange class"""
    __swig_setmethods__ = {}
    for _s in [Range]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorRange, name, value)
    __swig_getmethods__ = {}
    for _s in [Range]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ColorRange, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pythonapi::ColorRange self) -> ColorRange
        __init__(pythonapi::ColorRange self, IlwisTypes tp, pythonapi::ColorModel clrmodel) -> ColorRange
        """
        this = _ilwisobjects.new_ColorRange(*args)
        try: self.this.append(this)
        except: self.this = this
    def defaultColorModel(self, *args):
        """
        defaultColorModel(ColorRange self) -> pythonapi::ColorModel
        defaultColorModel(ColorRange self, pythonapi::ColorModel m)
        """
        return _ilwisobjects.ColorRange_defaultColorModel(self, *args)

    def toColor(*args):
        """
        toColor(quint64 clrint, pythonapi::ColorModel clrModel) -> Color
        toColor(PyObject * arg1, pythonapi::ColorModel colortype) -> Color
        """
        return _ilwisobjects.ColorRange_toColor(*args)

    if _newclass:toColor = staticmethod(toColor)
    __swig_getmethods__["toColor"] = lambda x: toColor
    def toString(self, *args):
        """toString(ColorRange self, Color clr, pythonapi::ColorModel clrType) -> std::string"""
        return _ilwisobjects.ColorRange_toString(self, *args)

    def stringToColorModel(self, *args):
        """stringToColorModel(ColorRange self, std::string clrmd) -> pythonapi::ColorModel"""
        return _ilwisobjects.ColorRange_stringToColorModel(self, *args)

    __swig_destroy__ = _ilwisobjects.delete_ColorRange
    __del__ = lambda self : None;
ColorRange_swigregister = _ilwisobjects.ColorRange_swigregister
ColorRange_swigregister(ColorRange)

def ColorRange_toColor(*args):
  """
    toColor(quint64 clrint, pythonapi::ColorModel clrModel) -> Color
    ColorRange_toColor(PyObject * arg1, pythonapi::ColorModel colortype) -> Color
    """
  return _ilwisobjects.ColorRange_toColor(*args)

class ContinousColorRange(ColorRange):
    """Proxy of C++ pythonapi::ContinousColorRange class"""
    __swig_setmethods__ = {}
    for _s in [ColorRange]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContinousColorRange, name, value)
    __swig_getmethods__ = {}
    for _s in [ColorRange]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContinousColorRange, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pythonapi::ContinousColorRange self) -> ContinousColorRange
        __init__(pythonapi::ContinousColorRange self, Color clr1, Color clr2, pythonapi::ColorModel colormodel=ColorModel::cmRGBA) -> ContinousColorRange
        __init__(pythonapi::ContinousColorRange self, Color clr1, Color clr2) -> ContinousColorRange
        """
        this = _ilwisobjects.new_ContinousColorRange(*args)
        try: self.this.append(this)
        except: self.this = this
    def toString(self):
        """toString(ContinousColorRange self) -> std::string"""
        return _ilwisobjects.ContinousColorRange_toString(self)

    def isValid(self):
        """isValid(ContinousColorRange self) -> bool"""
        return _ilwisobjects.ContinousColorRange_isValid(self)

    def clone(self):
        """clone(ContinousColorRange self) -> ContinousColorRange"""
        return _ilwisobjects.ContinousColorRange_clone(self)

    def ensure(self, *args):
        """
        ensure(ContinousColorRange self, PyObject const * v, bool inclusive=True) -> PyObject
        ensure(ContinousColorRange self, PyObject const * v) -> PyObject *
        """
        return _ilwisobjects.ContinousColorRange_ensure(self, *args)

    def containsVar(self, *args):
        """
        containsVar(ContinousColorRange self, PyObject const * v, bool inclusive=True) -> bool
        containsVar(ContinousColorRange self, PyObject const * v) -> bool
        """
        return _ilwisobjects.ContinousColorRange_containsVar(self, *args)

    def containsColor(self, *args):
        """
        containsColor(ContinousColorRange self, Color clr, bool inclusive=True) -> bool
        containsColor(ContinousColorRange self, Color clr) -> bool
        """
        return _ilwisobjects.ContinousColorRange_containsColor(self, *args)

    def containsRange(self, *args):
        """
        containsRange(ContinousColorRange self, ColorRange v, bool inclusive=True) -> bool
        containsRange(ContinousColorRange self, ColorRange v) -> bool
        """
        return _ilwisobjects.ContinousColorRange_containsRange(self, *args)

    def impliedValue(self, *args):
        """impliedValue(ContinousColorRange self, PyObject const * v) -> Color"""
        return _ilwisobjects.ContinousColorRange_impliedValue(self, *args)

    __swig_destroy__ = _ilwisobjects.delete_ContinousColorRange
    __del__ = lambda self : None;
ContinousColorRange_swigregister = _ilwisobjects.ContinousColorRange_swigregister
ContinousColorRange_swigregister(ContinousColorRange)

class TimeInterval(NumericRange):
    """Proxy of C++ pythonapi::TimeInterval class"""
    __swig_setmethods__ = {}
    for _s in [NumericRange]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeInterval, name, value)
    __swig_getmethods__ = {}
    for _s in [NumericRange]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TimeInterval, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pythonapi::TimeInterval self, IlwisTypes tp=itUNKNOWN) -> TimeInterval
        __init__(pythonapi::TimeInterval self) -> TimeInterval
        __init__(pythonapi::TimeInterval self, PyObject const * beg, PyObject const * end, std::string step="", IlwisTypes tp=itUNKNOWN) -> TimeInterval
        __init__(pythonapi::TimeInterval self, PyObject const * beg, PyObject const * end, std::string step="") -> TimeInterval
        __init__(pythonapi::TimeInterval self, PyObject const * beg, PyObject const * end) -> TimeInterval
        """
        this = _ilwisobjects.new_TimeInterval(*args)
        try: self.this.append(this)
        except: self.this = this
    def begin(self, *args):
        """
        begin(TimeInterval self) -> PyObject
        begin(TimeInterval self, PyObject const * t)
        """
        return _ilwisobjects.TimeInterval_begin(self, *args)

    def end(self, *args):
        """
        end(TimeInterval self) -> PyObject
        end(TimeInterval self, PyObject const * t)
        """
        return _ilwisobjects.TimeInterval_end(self, *args)

    def toString(self, *args):
        """toString(TimeInterval self, bool local, IlwisTypes arg3) -> std::string"""
        return _ilwisobjects.TimeInterval_toString(self, *args)

    def contains(self, *args):
        """
        contains(TimeInterval self, std::string const & value, bool inclusive=True) -> bool
        contains(TimeInterval self, std::string const & value) -> bool
        contains(TimeInterval self, PyObject const * value, bool inclusive=True) -> bool
        contains(TimeInterval self, PyObject const * value) -> bool
        """
        return _ilwisobjects.TimeInterval_contains(self, *args)

    def clone(self):
        """clone(TimeInterval self) -> Ilwis::Range *"""
        return _ilwisobjects.TimeInterval_clone(self)

    def isValid(self):
        """isValid(TimeInterval self) -> bool"""
        return _ilwisobjects.TimeInterval_isValid(self)

    __swig_destroy__ = _ilwisobjects.delete_TimeInterval
    __del__ = lambda self : None;
TimeInterval_swigregister = _ilwisobjects.TimeInterval_swigregister
TimeInterval_swigregister(TimeInterval)

class ReadOnly(type):
  @property
  def sUNDEF(cls):
    return "?"
  @property
  def shUNDEF(cls):
    return 32767
  @property
  def iUNDEF(cls):
    return 2147483645
  @property
  def rUNDEF(cls):
    return -1e308
  @property
  def flUNDEF(cls):
    return 1e38
  @property
  def i64UNDEF(cls):
    return 9223372036854775808


class Const(metaclass=ReadOnly):pass

# This file is compatible with both classic and new-style classes.


