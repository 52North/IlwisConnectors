/* 
Copyright (C) 2007 - 2015 52°North Initiative for Geospatial Open Source
Software GmbH

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License version 2 as published
by the Free Software Foundation.

If the program is linked with libraries which are licensed under one of
the following licenses, the combination of the program with the linked
library is not considered a "derivative work" of the program:

      • Apache License, version 2.0
      • Apache Software License, version 1.0
      • GNU Lesser General Public License, version 3
      • Mozilla Public License, versions 1.0, 1.1 and 2.0
      • Common Development and Distribution License (CDDL), version 1.0

Therefore the distribution of the program linked with libraries licensed
under the aforementioned licenses, is permitted by the copyright holders
if the distribution is compliant with both the GNU General Public
License version 2 and the aforementioned licenses.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
Public License for more details. 
*/ 
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.6
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.n52.ilwis.java;

public class GeoReference extends IlwisObject {
  private long swigCPtr;

  protected GeoReference(long cPtr, boolean cMemoryOwn) {
    super(ilwisobjectsJNI.GeoReference_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(GeoReference obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        ilwisobjectsJNI.delete_GeoReference(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public GeoReference(String resource) {
    this(ilwisobjectsJNI.new_GeoReference(resource), true);
  }

  public static GeoReference toGeoReference(IObject obj) {
    long cPtr = ilwisobjectsJNI.GeoReference_toGeoReference(IObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new GeoReference(cPtr, false);
  }

  public CoordinateSystem coordinateSystem() {
    return new CoordinateSystem(ilwisobjectsJNI.GeoReference_coordinateSystem(swigCPtr, this), true);
  }

  public void setCoordinateSystem(CoordinateSystem csy) {
    ilwisobjectsJNI.GeoReference_setCoordinateSystem(swigCPtr, this, CoordinateSystem.getCPtr(csy), csy);
  }

  public Coordinate pixel2Coord(PixelD pixel) {
    return new Coordinate(ilwisobjectsJNI.GeoReference_pixel2Coord__SWIG_0(swigCPtr, this, PixelD.getCPtr(pixel), pixel), true);
  }

  public Coordinate pixel2Coord(Pixel pixel) {
    return new Coordinate(ilwisobjectsJNI.GeoReference_pixel2Coord__SWIG_1(swigCPtr, this, Pixel.getCPtr(pixel), pixel), true);
  }

  public PixelD coord2Pixel(Coordinate coord) {
    return new PixelD(ilwisobjectsJNI.GeoReference_coord2Pixel(swigCPtr, this, Coordinate.getCPtr(coord), coord), true);
  }

  public Envelope box2Envelope(Box box) {
    return new Envelope(ilwisobjectsJNI.GeoReference_box2Envelope(swigCPtr, this, Box.getCPtr(box), box), true);
  }

  public Box envelope2Box(Envelope box) {
    return new Box(ilwisobjectsJNI.GeoReference_envelope2Box(swigCPtr, this, Envelope.getCPtr(box), box), true);
  }

  public double pixelSize() {
    return ilwisobjectsJNI.GeoReference_pixelSize(swigCPtr, this);
  }

  public Size size() {
    return new Size(ilwisobjectsJNI.GeoReference_size(swigCPtr, this), true);
  }

  public void setSize(Size sz) {
    ilwisobjectsJNI.GeoReference_setSize(swigCPtr, this, Size.getCPtr(sz), sz);
  }

  public boolean centerOfPixel() {
    return ilwisobjectsJNI.GeoReference_centerOfPixel(swigCPtr, this);
  }

  public void setCenterOfPixel(boolean yesno) {
    ilwisobjectsJNI.GeoReference_setCenterOfPixel(swigCPtr, this, yesno);
  }

  public boolean isCompatible(GeoReference other) {
    return ilwisobjectsJNI.GeoReference_isCompatible(swigCPtr, this, GeoReference.getCPtr(other), other);
  }

  public boolean compute() {
    return ilwisobjectsJNI.GeoReference_compute(swigCPtr, this);
  }

  public java.math.BigInteger ilwisType() {
    return ilwisobjectsJNI.GeoReference_ilwisType(swigCPtr, this);
  }

}
